2017 C++ Questions and Answers
==============================

Section A
---------

What is Array? Explain one dimensional array with example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Array is a collection of similar type of data items stored at contiguous
memory locations. Array is a data structure which can store a fixed-size
sequential collection of elements of the same type. An array is used to
store a collection of data, but it is often more useful to think of an
array as a collection of variables of the same type.

.. code:: cpp

   int arr[5] = {1, 2, 3, 4, 5};

Write a function to find out the maximun and the second maximum element in an array in an array of integers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: cpp

   void max(int arr[], int n) {
       int max = arr[0];
       int second_max = arr[0];
       for (int i = 0; i < n; i++) {
           if (arr[i] > max) {
               second_max = max;
               max = arr[i];
           } else if (arr[i] > second_max) {
               second_max = arr[i];
           }
       }
       cout << "Max: " << max << endl;
       cout << "Second Max: " << second_max << endl;
   }

Define Polynomial as an abstract data type. Write a function to multiply two polynomials and to return the product polynomial
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Polynomial as an abstract data type can be defined as a collection of
terms, where each term consists of a coefficient and an exponent.

   For example, the polynomial 2x^3 + 3x^2 + 4x + 5 can be represented
   as a list of terms: [{‘coeff’: 2, ‘exp’: 3}, {‘coeff’: 3, ‘exp’: 2},
   {‘coeff’: 4, ‘exp’: 1}, {‘coeff’: 5, ‘exp’: 0}]

.. code:: cpp

   #include <map>
   #include <vector>
   #include <algorithm>

   class Polynomial {
       private:
           std::map<int, int> terms;  // maps exponent to coefficient

       public:
           Polynomial() {}

           Polynomial(std::initializer_list<int> coefficients) {
               // adds terms for each coefficient, starting from the highest exponent
               int exponent = coefficients.size() - 1;
               for (int coefficient : coefficients) {
                   terms[exponent--] = coefficient;
               }
           }

           int get_coefficient(int exponent) {
               if (terms.count(exponent) == 0) {
                   return 0;  // default coefficient is 0
               }
               return terms[exponent];
           }

           void set_coefficient(int exponent, int coefficient) {
               if (coefficient == 0) {
                   terms.erase(exponent);  // remove term if coefficient is 0
               } else {
                   terms[exponent] = coefficient;
               }
           }

           int get_degree() {
               if (terms.empty()) {
                   return -1;  // constant polynomial has degree -1
               }
               return terms.rbegin()->first;  // returns exponent of highest-degree term
           }

           Polynomial operator+(const Polynomial& other) {
               Polynomial result = *this;  // start with current polynomial
               for (int exponent = 0; exponent <= other.get_degree(); ++exponent) {
                   int coefficient = other.get_coefficient(exponent);
                   result.set_coefficient(exponent, result.get_coefficient(exponent) + coefficient);
               }
               return result;
           }

           Polynomial operator-(const Polynomial& other) {
               Polynomial result = *this;  // start with current polynomial
               for (int exponent = 0; exponent <= other.get_degree(); ++exponent) {
                   int coefficient = other.get_coefficient(exponent);
                   result.set_coefficient(exponent, result.get_coefficient(exponent) - coefficient);
               }
               return result;
           }

           Polynomial operator*(const Polynomial& other) {
               Polynomial result;
               for (int i = 0; i <= get_degree(); ++i) {
                   for (int j = 0; j <= other.get_degree(); ++j) {
                       int coefficient = get_coefficient(i) * other.get_coefficient(j);
                       int exponent = i + j;
                       result.set_coefficient(exponent, result.get_coefficient(exponent) + coefficient);
                   }
               }
               return result;
           }
   };

   }

Write a program to reverse the giving string using stack operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: cpp

   void reverse(string str) {
       stack<char> s;
       for (int i = 0; i < str.length(); i++) {
           s.push(str[i]);
       }
       while (!s.empty()) {
           cout << s.top();
           s.pop();
       }
   }

Find the maximum numbers of nodes in a binary tree of depth S
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The maximum number of nodes in a binary tree of depth S is 2^S - 1.

This is because the maximum number of nodes in a binary tree of depth S
is the sum of the maximum number of nodes in a binary tree of depth S-1
and the maximum number of nodes in a binary tree of depth S-2.

For example, the maximum number of nodes in a binary tree of depth 3 is
the sum of the maximum number of nodes in a binary tree of depth 2 and
the maximum number of nodes in a binary tree of depth 1.

.. code:: cpp

   int max_nodes(int s) {
       return pow(2, s) - 1;
   }

Find the post fix from the following infix notation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   (A + B) *(C* D - E) \* F

The postfix notation of the given infix notation is:

   A B + C D \* E - F \*

To convert an infix notation to a postfix notation, we can use the
following algorithm:

1. Create an empty stack called ``opstack`` for keeping operators.
   Create an empty list for output.
2. Convert the input infix string to a list by using the string method
   ``split``.
3. Scan the token list from left to right.
4. If the token is an operand, append it to the end of the output list.
5. If the token is a left parenthesis, push it on the ``opstack``.
6. If the token is a right parenthesis, pop the ``opstack`` until the
   corresponding left parenthesis is removed. Append each operator to
   the end of the output list.
7. If the token is an operator, ``*``, ``/``, ``+``, or ``-``, push it
   on the ``opstack``. However, first remove any operators already on
   the ``opstack`` that have higher or equal precedence and append them
   to the output list.
8. When the input expression has been completely processed, check the
   ``opstack``. Any operators still on the stack can be removed and
   appended to the end of the output list.

Write an algorithm to evaluate post fix expression
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The algorithm to evaluate a postfix expression is as follows:

1. Create an empty stack called ``operandStack``.
2. Convert the string to a list by using the string method ``split``.
3. Scan the token list from left to right.
4. If the token is an operand, convert it from a string to an integer
   and push the value onto the ``operandStack``.
5. If the token is an operator, ``*``, ``/``, ``+``, or ``-``, it will
   need two operands. Pop the ``operandStack`` twice. The first pop is
   the second operand and the second pop is the first operand. Perform
   the arithmetic operation. Push the result back on the
   ``operandStack``.
6. When the input expression has been completely processed, the result
   is on the stack. Pop the ``operandStack`` and return the value.

.. code:: cpp

   #include <stack>
   #include <cctype>

   int evaluate_postfix(const std::string& expression) {
       std::stack<int> stack;
       for (char character : expression) {
           if (isdigit(character)) {
               stack.push(character - '0');
           } else {
               int operand2 = stack.top();
               stack.pop();
               int operand1 = stack.top();
               stack.pop();
               int result;
               switch (character) {
                   case '+':
                       result = operand1 + operand2;
                       break;
                   case '-':
                       result = operand1 - operand2;
                       break;
                   case '*':
                       result = operand1 * operand2;
                       break;
                   case '/':
                       result = operand1 / operand2;
                       break;
               }
               stack.push(result);
           }
       }
       return stack.top();
   }

Define B tree with it’s properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A B-tree is a self-balancing tree data structure that keeps data sorted
and allows searches, sequential access, insertions, and deletions in
logarithmic time. The B-tree is a generalization of a binary search tree
in that a node can have more than two children.

Properties of B-tree:

1. Each node in a B-tree contains a number of keys (and associated
   values) and a number of children.
2. The keys in a node are sorted and the number of keys in a node is
   limited to a specific range (e.g. between 2 and 5 keys). This range
   is called the order of the B-tree.
3. Each node except the root and leaf nodes must have at least
   ceil(order/2) keys. Leaf nodes have no children and all nodes have at
   most order-1 keys.
4. All leaves are at the same depth, which is the height of the tree.
5. A B-tree with n keys has a height of O(log n).
6. Insertions and deletions may cause the tree to become unbalanced,
   requiring the tree to be rebalanced by splitting or merging nodes.

Here is an example of a B-tree of order 3:

.. figure:: https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/B-tree.svg/1200px-B-tree.svg.png
   :alt: B-tree

   B-tree

What is Hashing? Give it’s significance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Hashing is the process of mapping data of any size to a fixed size data
(typically a small data structure called a hash) using a mathematical
function. The output of the function is called the hash value or simply
the hash. Hashing is used to index and retrieve items in a database
because it is faster to find the item using the shorter hashed key than
to find it using the original value.

Some of the significant uses of hashing include:

1. Data storage and retrieval: Hashing is used to store and retrieve
   data efficiently from a database or a data structure such as a hash
   table.

2. Data integrity: Hashing can be used to ensure the integrity of a data
   by storing the hash value along with the data and later comparing the
   stored hash value with a newly calculated hash value. If the two hash
   values are different, it means the data has been tampered with.

3. Password storage: Hashing is often used to store passwords in a
   secure manner. The password is hashed and the hash value is stored
   instead of the original password. When a user tries to login, the
   password they enter is hashed and compared with the stored hash
   value. If the two hash values are the same, the login is successful.
   This method ensures that the original password is not stored in plain
   text, which would be a security risk.

What is Sparse Matrix? Discuss its types using suitable example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A sparse matrix is a matrix that has a large number of zero elements. In
other words, it is a matrix in which most of the elements are zero.
Sparse matrices are useful for storing and manipulating large matrices
efficiently, because they take up less space and are faster to operate
on than dense matrices (matrices in which most elements are non-zero).

There are two types of sparse matrices:

1. **Row-based sparse matrix**: A row-based sparse matrix is a matrix in
   which most of the elements are zero and the non-zero elements are
   stored in rows. The non-zero elements are stored in a list, along
   with the row number and column number of each element. The list is
   sorted by row number. The following is an example of a row-based
   sparse matrix:

=== ====== =====
Row Column Value
=== ====== =====
0   0      1
0   2      2
1   1      3
2   0      4
2   2      5
=== ====== =====

2. **Column-based sparse matrix**: A column-based sparse matrix is a
   matrix in which most of the elements are zero and the non-zero
   elements are stored in columns. The non-zero elements are stored in a
   list, along with the row number and column number of each element.
   The list is sorted by column number. The following is an example of a
   column-based sparse matrix:

=== ====== =====
Row Column Value
=== ====== =====
0   0      1
2   0      4
1   1      3
0   2      2
2   2      5
=== ====== =====

What is Selection Sort? Explain with example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Selection sort is a sorting algorithm that selects the smallest element
from an unsorted list in each iteration and places that element at the
beginning of the unsorted list. The following is an example of selection
sort:

Here is an example of how selection sort works:

   Input list: [5, 2, 4, 6, 1, 3]

1: Find the smallest element in the list and swap it with the first
element.

   unsorted: [2, 5, 4, 6, 1, 3] sorted: [1]

2: Find the second smallest element in the list and swap it with the
second element.

   unsorted: [2, 4, 5, 6, 1, 3] sorted: [1, 2]

3: Find the third smallest element in the list and swap it with the
third element.

   unsorted: [2, 4, 5, 6, 1, 3] sorted: [1, 2, 3]

4: Find the fourth smallest element in the list and swap it with the
fourth element.

   unsorted: [2, 4, 5, 1, 6, 3] sorted: [1, 2, 3, 4]

5: Find the fifth smallest element in the list and swap it with the
fifth element.

   unsorted: [2, 4, 1, 5, 6, 3] sorted: [1, 2, 3, 4, 5]

6: Find the sixth smallest element in the list and swap it with the
sixth element.

   unsorted: [1, 4, 2, 5, 6, 3] sorted: [1, 2, 3, 4, 5, 6]

..

   Output list: [1, 2, 3, 4, 5, 6]

The worst-case and average-case time complexity of selection sort is
O(n^2). This makes it inefficient for large lists. However, it has the
advantage of being simple to implement and having a low memory overhead.

Write a program to generate Fibonacci series of n terms using recursion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: cpp

   #include <iostream>
   using namespace std;

   int fibonacci(int n) {
       if (n == 0) {
           return 0;
       } else if (n == 1) {
           return 1;
       } else {
           return fibonacci(n - 1) + fibonacci(n - 2);
       }
   }

   int main() {
       int n;
       cout << "Enter the number of terms: ";
       cin >> n;
       cout << "Fibonacci series: ";
       for (int i = 0; i < n; i++) {
           cout << fibonacci(i) << " ";
       }
       return 0;
   }

Write a program to count the number of leaf nodes in a binary tree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: cpp

   #include <iostream>
   using namespace std;

   struct Node {
       int data;
       Node *left;
       Node *right;
   };

   Node *createNode(int data) {
       Node *newNode = new Node();
       newNode->data = data;
       newNode->left = NULL;
       newNode->right = NULL;
       return newNode;
   }

   int countLeafNodes(Node *root) {
       if (root == NULL) {
           return 0;
       } else if (root->left == NULL && root->right == NULL) {
           return 1;
       } else {
           return countLeafNodes(root->left) + countLeafNodes(root->right);
       }
   }

   int main() {
       Node *root = createNode(1);
       root->left = createNode(2);
       root->right = createNode(3);
       root->left->left = createNode(4);
       root->left->right = createNode(5);
       cout << "Number of leaf nodes: " << countLeafNodes(root);
       return 0;
   }

What is a Binary Search Tree? Explain with example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A binary search tree is a binary tree in which the value of each node is
greater than or equal to the values in all the nodes in that node’s left
subtree and less than or equal to the values in all the nodes in that
node’s right subtree. The following is an example of a binary search
tree:

::

   4

| /
| 2 5 /
| 1 3
